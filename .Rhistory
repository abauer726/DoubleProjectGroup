mean((Ytest - Yhat.bart)^2) # test error
bart_pred2 = predict(predYval, Xtestbart)
knitr::opts_chunk$set(echo = TRUE)
knitr::include_graphics("/Users/kimbauer/Desktop/DoubleProjectGroup/131 Project/elasticnetimage.png")
knitr::include_graphics("/Users/kimbauer/Desktop/DoubleProjectGroup/131 Project/elasticnetimage.png")
knitr::include_graphics("/Users/kimbauer/Desktop/DoubleProjectGroup/131 Project/BARTalgorithm.png")
knitr::opts_chunk$set(echo = TRUE)
# list all packages here
library(tidyverse)
library(knitr)
library(lubridate)
library(httpuv)
library(cluster)
library(factoextra)
library(data.table)
library(dplyr)
library(ggplot2)
library(corrplot)
# load music.csv
music <- read.csv("/Users/kimbauer/Desktop/DoubleProjectGroup/131 Project/Spotify Dataset/musicdata.csv")
# music.csv preview
head(music)
## manipulation of 'artist' variable
# create a new table that aggregates the variables popularity and artists and finds the mean song popularity for each given artist
artist_pop_table <- aggregate(music$popularity, list(music$artists), FUN = mean)
# merges the table above into our music dataset by artist
full_merge <- merge(x = music, y = artist_pop_table, by.x = c("artists"), by.y = c("Group.1"), all.x = TRUE)
# rename full dataset and x column
full_data <- rename(full_merge, avg_art_pop = x)
# delete previous 'artist' column
delete1 <- c("artists")
full_data <- full_data[!(names(full_data) %in% delete1)]
head(full_data)
# delete variables that will not be useful in our exploration
delete2 <- c("id", "key", "name", "release_date")
full_data <- full_data[!(names(full_data) %in% delete2)]
# mutating leftover int variables to num type
full_data$popularity <- as.numeric(full_data$popularity)
full_data$year <- as.numeric(full_data$year)
full_data$duration_ms <- as.numeric(full_data$duration_ms)
set.seed((123))
# sample data to use for exploratory graphics
sample <- full_data[sample(nrow(full_data), 200), ]
# mutating dummy variables
full_data2 = full_data %>%
mutate(explicit = as.factor(ifelse(explicit == 0, "Clean", "Explicit"))) %>%
mutate(mode = as.factor(ifelse(mode == 0, "Minor", "Major")))
# split training and testing data
#set seed
set.seed(123)
# Sample 70% of observations as training data
trainsample = sort(sample(nrow(full_data), nrow(full_data)*.7))
# define dat.train as the 70% of observaions
train = full_data[trainsample,]
# The rest as test data
test = full_data[-trainsample,]
library(ISLR)
library(tidyverse)
library(class)
library(FNN)
do.chunk <- function(chunkid, folddef, Xdat, Ydat){
train = (folddef!= chunkid)
Xtr = Xdat[train,]
Ytr = Ydat[train]
Xval = Xdat[!train,]
Yval = Ydat[!train]
predYtr = knn(train = Xtr, test = Xtr, cl = Ytr)
predYvl = knn(train = Xtr, test = Xval, cl = Ytr)
data.frame(fold = chunkid,
train.error = mean(predYtr != Ytr),
val.error = mean(predYvl != Yval))
}
nfold = 10
set.seed(100)
folds = cut(1:nrow(train), breaks = nfold, labels = FALSE) %>% sample()
error.folds = NULL
# Give possible number of nearest neighbours to be considered
allK = 1:100
# Set seed since do.chunk() contains a random component induced by knn()
set.seed(888)
Ytrainknn <- train$popularity %>% scale(center = TRUE, scale = TRUE) # from lab 5
Xtrainknn <- train %>% select(-popularity) %>% scale(center = TRUE, scale = TRUE)
Ytestknn <- test$popularity %>% scale(center = TRUE, scale = TRUE)
Xtestknn <- test %>% select(-popularity) %>% scale(center = TRUE, scale = TRUE)
Xtrainknn = unlist(Xtrainknn) # unlist to convert from list to vector
Ytrainknn = unlist(Ytrainknn)
# Loop through different number of neighbors
for (k in allK){
# Loop through different chunk id
for (j in seq(3)){
tmp = do.chunk(chunkid=j, folddef=folds, Xdat=Xtrainknn,
Ydat=Ytrainknn)
tmp$neighbors = k # Record the last number of neighbor
error.folds = rbind(error.folds, tmp) # combine results }
}
}
head(error.folds, 10)
error.folds = NULL
# Give possible number of nearest neighbours to be considered
allK = 1:100
# Set seed since do.chunk() contains a random component induced by knn()
set.seed(888)
Ytrainknn <- train$popularity
Xtrainknn <- train %>% select(-popularity) %>% scale(center = TRUE, scale = TRUE)
Ytestknn <- test$popularity
Xtestknn <- test %>% select(-popularity) %>% scale(center = TRUE, scale = TRUE)
#below code may not be needed anymore
#Xtrainknn = unlist(Xtrainknn) # unlist to convert from list to vector
#Ytrainknn = unlist(Ytrainknn)
# Loop through different number of neighbors
for (k in allK){
# Loop through different chunk id
for (j in seq(3)){
tmp = do.chunk(chunkid=j, folddef=folds, Xdat=Xtrainknn,
Ydat=Ytrainknn)
tmp$neighbors = k # Record the last number of neighbor
error.folds = rbind(error.folds, tmp) # combine results }
}
}
head(error.folds, 10)
knitr::opts_chunk$set(echo = TRUE)
# list all packages here
library(tidyverse)
library(knitr)
library(lubridate)
library(httpuv)
library(cluster)
library(factoextra)
library(data.table)
library(dplyr)
library(ggplot2)
library(corrplot)
# load music.csv
music <- read.csv("/Users/kimbauer/Desktop/DoubleProjectGroup/131 Project/Spotify Dataset/musicdata.csv")
# music.csv preview
head(music)
## manipulation of 'artist' variable
# create a new table that aggregates the variables popularity and artists and finds the mean song popularity for each given artist
artist_pop_table <- aggregate(music$popularity, list(music$artists), FUN = mean)
# merges the table above into our music dataset by artist
full_merge <- merge(x = music, y = artist_pop_table, by.x = c("artists"), by.y = c("Group.1"), all.x = TRUE)
# rename full dataset and x column
full_data <- rename(full_merge, avg_art_pop = x)
# delete previous 'artist' column
delete1 <- c("artists")
full_data <- full_data[!(names(full_data) %in% delete1)]
head(full_data)
# delete variables that will not be useful in our exploration
delete2 <- c("id", "key", "name", "release_date")
full_data <- full_data[!(names(full_data) %in% delete2)]
# mutating leftover int variables to num type
full_data$popularity <- as.numeric(full_data$popularity)
full_data$year <- as.numeric(full_data$year)
full_data$duration_ms <- as.numeric(full_data$duration_ms)
set.seed((123))
# sample data to use for exploratory graphics
sample <- full_data[sample(nrow(full_data), 200), ]
# mutating leftover int variables to num type
full_data$popularity <- as.numeric(full_data$popularity)
full_data$year <- as.numeric(full_data$year)
full_data$duration_ms <- as.numeric(full_data$duration_ms)
set.seed((123))
# sample data to use for exploratory graphics
sample <- full_data[sample(nrow(full_data), 200), ]
# mutating dummy variables
full_data2 = full_data %>%
mutate(explicit = as.factor(ifelse(explicit == 0, "Clean", "Explicit"))) %>%
mutate(mode = as.factor(ifelse(mode == 0, "Minor", "Major")))
# split training and testing data
#set seed
set.seed(123)
# Sample 70% of observations as training data
trainsample = sort(sample(nrow(full_data), nrow(full_data)*.7))
# define dat.train as the 70% of observaions
train = full_data[trainsample,]
# The rest as test data
test = full_data[-trainsample,]
library(ISLR)
library(tidyverse)
library(class)
library(FNN)
do.chunk <- function(chunkid, folddef, Xdat, Ydat){
train = (folddef!= chunkid)
Xtr = Xdat[train,]
Ytr = Ydat[train]
Xval = Xdat[!train,]
Yval = Ydat[!train]
predYtr = knn(train = Xtr, test = Xtr, cl = Ytr)
predYvl = knn(train = Xtr, test = Xval, cl = Ytr)
data.frame(fold = chunkid,
train.error = mean(predYtr != Ytr),
val.error = mean(predYvl != Yval))
}
nfold = 10
set.seed(100)
folds = cut(1:nrow(train), breaks = nfold, labels = FALSE) %>% sample()
error.folds = NULL
# Give possible number of nearest neighbours to be considered
allK = 1:100
# Set seed since do.chunk() contains a random component induced by knn()
set.seed(888)
Ytrainknn <- train$popularity
Xtrainknn <- train %>% select(-popularity) %>% scale(center = TRUE, scale = TRUE)
Ytestknn <- test$popularity
Xtestknn <- test %>% select(-popularity) %>% scale(center = TRUE, scale = TRUE)
#below code may not be needed anymore
#Xtrainknn = unlist(Xtrainknn) # unlist to convert from list to vector
#Ytrainknn = unlist(Ytrainknn)
# Loop through different number of neighbors
for (k in allK){
# Loop through different chunk id
for (j in seq(3)){
tmp = do.chunk(chunkid=j, folddef=folds, Xdat=Xtrainknn,
Ydat=Ytrainknn)
tmp$neighbors = k # Record the last number of neighbor
error.folds = rbind(error.folds, tmp) # combine results }
}
}
head(error.folds, 10)
knitr::opts_chunk$set(echo = TRUE)
# list all packages here
library(tidyverse)
library(knitr)
library(lubridate)
library(httpuv)
library(cluster)
library(factoextra)
library(data.table)
library(dplyr)
library(ggplot2)
library(corrplot)
# load music.csv
music <- read.csv("/Users/Grant/DoubleProjectGroup/131 Project/Spotify Dataset/musicdata.csv")
# list all packages here
library(tidyverse)
library(knitr)
library(lubridate)
library(httpuv)
library(cluster)
library(factoextra)
library(data.table)
library(dplyr)
library(ggplot2)
library(corrplot)
# load music.csv
music <- read.csv("/Users/kimbauer/Desktop/DoubleProjectGroup/131 Project/Spotify Dataset/musicdata.csv")
# music.csv preview
head(music)
## manipulation of 'artist' variable
# create a new table that aggregates the variables popularity and artists and finds the mean song popularity for each given artist
artist_pop_table <- aggregate(music$popularity, list(music$artists), FUN = mean)
# merges the table above into our music dataset by artist
full_merge <- merge(x = music, y = artist_pop_table, by.x = c("artists"), by.y = c("Group.1"), all.x = TRUE)
# rename full dataset and x column
full_data <- rename(full_merge, avg_art_pop = x)
# delete previous 'artist' column
delete1 <- c("artists")
full_data <- full_data[!(names(full_data) %in% delete1)]
head(full_data)
# delete variables that will not be useful in our exploration
delete2 <- c("id", "key", "name", "release_date")
full_data <- full_data[!(names(full_data) %in% delete2)]
# mutating leftover int variables to num type
full_data$popularity <- as.numeric(full_data$popularity)
full_data$year <- as.numeric(full_data$year)
full_data$duration_ms <- as.numeric(full_data$duration_ms)
set.seed((123))
# sample data to use for exploratory graphics
sample <- full_data[sample(nrow(full_data), 200), ]
# mutating dummy variables
full_data2 = full_data %>%
mutate(explicit = as.factor(ifelse(explicit == 0, "Clean", "Explicit"))) %>%
mutate(mode = as.factor(ifelse(mode == 0, "Minor", "Major")))
# split training and testing data
#set seed
set.seed(123)
# Sample 70% of observations as training data
trainsample = sort(sample(nrow(full_data), nrow(full_data)*.7))
# define dat.train as the 70% of observaions
train = full_data[trainsample,]
# The rest as test data
test = full_data[-trainsample,]
library(earth) # library for fitting MARS models
library(caret) # library for tuning the model parameters
trainmars <- train # copy dataset for mars model
#create a tuning grid
hyper_grid <- expand.grid(degree = 1:3,
nprune = seq(2, 50, length.out = 10) %>%
floor())
#make this example reproducible
set.seed(123)
#fit MARS model using k-fold cross-validation
cv_mars <- train(
x = subset(trainmars, select = -c(popularity)),
y = trainmars$popularity,
method = "earth",
metric = "RMSE",
trControl = trainControl(method = "cv", number = 10),
tuneGrid = hyper_grid)
#display model with lowest test RMSE
mars_model <- cv_mars$results %>%
filter(nprune == cv_mars$bestTune$nprune, degree == cv_mars$bestTune$degree)
mars_model
#display test RMSE by terms and degree
ggplot(cv_mars)
# elastic model prediction on test data (to have prediction code)
mars.pred <- predict(mars_model, test)
# elastic model prediction on test data (to have prediction code)
mars.pred <- predict(mars_model, test$popularity)
# elastic model prediction on test data (to have prediction code)
mars.pred <- predict(mars_model, test$popularity)
# elastic model prediction on test data (to have prediction code)
mars.pred <- predict(cv_mars, test)
# evaluate mse on the test data
mars_mse <- mean((mars.pred - test$popularity)^2)
mars_mse
install.packages("plotmo")
install.packages("plotmo")
library(plotmo)
library(plotmo)
imp = varImp( cv_mars  )
imp = imp$importance %>%
as.data.frame() %>%
mutate( variable = row.names(.) ) %>%
filter( Overall > 0 )
plotmo( car,  all1 = T   )
library(plotmo)
imp = varImp( cv_mars  )
imp = imp$importance %>%
as.data.frame() %>%
mutate( variable = row.names(.) ) %>%
filter( Overall > 0 )
plotmo( cv_mars,  all1 = T   )
library(plotmo)
imp = varImp( cv_mars  )
imp = imp$importance %>%
as.data.frame() %>%
mutate(variable = row.names(.) ) %>%
filter(Overall > 0)
plotmo(cv_mars,  all1 = F)
library(plotmo)
imp = varImp( cv_mars  )
imp = imp$importance %>%
as.data.frame() %>%
mutate(variable = row.names(.) ) %>%
filter(Overall > 0)
plotmo(cv_mars,  all1 = T)
# best tuning parameters
train %>%
unnest(best_tune, .drop = F ) %>%
select(popularity, nprune, degree) %>%
knitr::kable( align = 'lcc')
# best tuning parameters
train %>%
unnest(best_tune, .drop = F ) %>%
select(test, nprune, degree) %>%
knitr::kable( align = 'lcc')
# best tuning parameters
mars.pred %>%
select(test, pred, obs ) %>%
gather(key = 'key', value = 'value', -test ) %>%
ggplot( aes( x = value, fill = key ) ) +
geom_histogram( position = 'identity'
, alpha = 0.5) +
facet_wrap(~test, scales = 'free' )
# best tuning parameters
mars.pred %>%
select(test$popularity, pred, obs ) %>%
gather(key = 'key', value = 'value', -test$popularity ) %>%
ggplot( aes( x = value, fill = key ) ) +
geom_histogram( position = 'identity'
, alpha = 0.5) +
facet_wrap(~test$popularity, scales = 'free' )
# best tuning parameters
mars.pred %>%
select(popularity, pred, obs ) %>%
gather(key = 'key', value = 'value', -popularity ) %>%
ggplot( aes( x = value, fill = key ) ) +
geom_histogram( position = 'identity'
, alpha = 0.5) +
facet_wrap(popularity, scales = 'free' )
# best tuning parameters
cv_mars %>%
select(popularity, pred, obs ) %>%
gather(key = 'key', value = 'value', -popularity ) %>%
ggplot( aes( x = value, fill = key ) ) +
geom_histogram( position = 'identity'
, alpha = 0.5) +
facet_wrap(popularity, scales = 'free' )
# best tuning parameters
cv_mars %>%
select(train$popularity, pred, obs ) %>%
gather(key = 'key', value = 'value', -popularity ) %>%
ggplot( aes( x = value, fill = key ) ) +
geom_histogram( position = 'identity'
, alpha = 0.5) +
facet_wrap(popularity, scales = 'free' )
# best tuning parameters
cv_mars %>%
select(train$popularity, pred, obs ) %>%
gather(key = 'key', value = 'value', -train$popularity ) %>%
ggplot( aes( x = value, fill = key ) ) +
geom_histogram( position = 'identity'
, alpha = 0.5) +
facet_wrap(train$popularity, scales = 'free' )
# best tuning parameters
cv_mars %>%
select(train$popularity, pred, obs ) %>%
gather(key = 'key', value = 'value', -train$popularity ) %>%
ggplot( aes( x = value, fill = key ) ) +
geom_histogram( position = 'identity'
, alpha = 0.5) +
facet_wrap(train$popularity, scales = 'free' )
# best tuning parameters
mars_model %>%
select(train$popularity, pred, obs ) %>%
gather(key = 'key', value = 'value', -train$popularity ) %>%
ggplot( aes( x = value, fill = key ) ) +
geom_histogram( position = 'identity'
, alpha = 0.5) +
facet_wrap(train$popularity, scales = 'free' )
cv_mars
mars_model
mars.pred
# best tuning parameters
df_res = cv_mars %>%
select(popularity, y, obs ) %>%
mutate( resid = pred-obs ) %>%
group_by( data_name ) %>%
nest() %>%
mutate( p = pmap( list( df = data, title = data_name),  oetteR::f_plot_pretty_points, col_x = 'obs', col_y = 'resid' )
, p = map(p, function(p) p = p + geom_hline( yintercept = 0, color = 'black', size = 1) ))
# best tuning parameters
df_res = mars.pred %>%
select(popularity, y, obs ) %>%
mutate( resid = pred-obs ) %>%
group_by( data_name ) %>%
nest() %>%
mutate( p = pmap( list( df = data, title = data_name),  oetteR::f_plot_pretty_points, col_x = 'obs', col_y = 'resid' )
, p = map(p, function(p) p = p + geom_hline( yintercept = 0, color = 'black', size = 1) ))
mars.pred
mars.pred
df_mars_visual <- data.frame(mars.pred, test$popularity)
df_mars_visual <- data.frame(mars.pred, test$popularity)
df_mars_visual <- data.frame(mars.pred, test$popularity)
df_mars_visual
resid <- test$popularity - mars.pred
df_mars_visual <- data.frame(mars.pred, test$popularity)
df_mars_visual
resid <- test$popularity - mars.pred
df_mars_visual <- data.frame(test$popularity, mars.pred, resid)
df_mars_visual
plot(df_mars_visual$y.1)
sample_mars <- df_mars_visual[sample(nrow(df_mars_visual), 200), ]
plot(sample_mars$y.1)
sample_mars <- df_mars_visual[sample(nrow(df_mars_visual), 200), ]
plot(sample_mars$y.1)
abline(0,0)
sample_mars <- df_mars_visual[sample(nrow(df_mars_visual), 200), ]
plot(sample_mars$y.1, title = 'MARS residuals')
abline(0,0)
sample_mars <- df_mars_visual[sample(nrow(df_mars_visual), 200), ]
plot(sample_mars$y.1, ylab = 'MARS residuals')
abline(0,0)
sample_mars <- df_mars_visual[sample(nrow(df_mars_visual), 200), ]
plot(sample_mars$y.1, ylab = 'MARS residuals', col = 'blue')
abline(0,0)
sample_mars <- df_mars_visual[sample(nrow(df_mars_visual), 200), ]
plot(sample_mars$y.1, ylab = 'MARS residuals', col = 'blue')
abline(0,0, col = 'red')
sample_mars <- df_mars_visual[sample(nrow(df_mars_visual), 200), ]
plot(sample_mars$y.1, ylab = 'MARS residuals', col = 'blue') +
abline(0,0, col = 'red')
sample_mars <- df_mars_visual[sample(nrow(df_mars_visual), 200), ]
plot(sample_mars$y.1, ylab = 'MARS residuals', col = 'blue', cex = 0.3) +
abline(0,0, col = 'red')
sample_mars <- df_mars_visual[sample(nrow(df_mars_visual), 200), ]
plot(sample_mars$y.1, ylab = 'MARS residuals', col = 'blue', cex = 0.4) +
abline(0,0, col = 'red')
p1 <- vip(cv_mars, num_features = 40, geom = "point", value = "gcv") + ggtitle("GCV")
install.packages('vip')
library(vip)
p1 <- vip(cv_mars, num_features = 14, geom = "point", value = "gcv") + ggtitle("GCV")
library(vip)
p1 <- vip(cv_mars, num_features = 14, geom = "point", value = "gcv") + ggtitle("GCV")
library(vip)
p1 <- vip(cv_mars, num_features = 14, geom = "point", value = "gcv") + ggtitle("GCV")
p1
library(vip)
p1 <- vip(cv_mars, num_features = 16, geom = "point", value = "gcv") + ggtitle("GCV")
p1
library(vip)
p1 <- vip(cv_mars, num_features = 40, geom = "point", value = "gcv") + ggtitle("GCV")
p1
library(vip)
p1 <- vip(cv_mars, num_features = 5, geom = "point", value = "gcv") + ggtitle("GCV")
varImpPlot(cv_mars, sort=T, main="Variable Importance for cv_mars", n.var=5)
library(vip)
p1 <- vip(cv_mars, num_features = 5, geom = "point", value = "gcv") + ggtitle("GCV")
library(gbm)
varImpPlot(cv_mars, sort=T, main="Variable Importance for cv_mars", n.var=5)
library(vip)
p1 <- vip(cv_mars, num_features = 5, geom = "point", value = "gcv") + ggtitle("GCV")
library(ROCR)
varImpPlot(cv_mars, sort=T, main="Variable Importance for cv_mars", n.var=5)
library(vip)
p1 <- vip(cv_mars, num_features = 5, geom = "point", value = "gcv") + ggtitle("GCV")
p1
conf_mat_boost = table(pred = mars.pred, truth = test)
mars.pred
conf_mat_boost = table(pred = mars.pred, truth = test$popularity)
conf_mat_boost
