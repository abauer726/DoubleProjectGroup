knitr::opts_chunk$set(echo = TRUE)
print('hellochange')
knitr::opts_chunk$set(echo = TRUE)
install.packages("spotifyr")
library(spotifyr)
library(tidyverse)
library(knitr)
install.packages("httpuv")
library(httpuv)
install.packages("httpuv")
knitr::opts_chunk$set(echo = TRUE)
install.packages("spotifyr")
library(spotifyr)
library(tidyverse)
library(knitr)
get_my_recently_played(limit = 5) %>%
mutate(artist.name = map_chr(track.artists, function(x) x$name[1]),
played_at = as_datetime(played_at)) %>%
select(track.name, artist.name, track.album.name, played_at) %>%
kable()
Sys.setenv(SPOTIFY_CLIENT_ID = 'da295936d8a2457b8eae51d982b99425')
Sys.setenv(SPOTIFY_CLIENT_SECRET = '9a802ea0578a4deeb0cdab988aae206a')
access_token <- get_spotify_access_token()
joy <- get_artist_audio_features('joy division')
head(joy)
joy %>%
arrange(-valence) %>%
select(track_name, valence) %>%
head(5) %>%
kable()
get_my_recently_played(limit = 5) %>%
mutate(artist.name = map_chr(track.artists, function(x) x$name[1]),
played_at = as_datetime(played_at)) %>%
select(track.name, artist.name, track.album.name, played_at) %>%
kable()
Sys.setenv(SPOTIFY_CLIENT_ID = 'da295936d8a2457b8eae51d982b99425')
Sys.setenv(SPOTIFY_CLIENT_SECRET = '9a802ea0578a4deeb0cdab988aae206a')
access_token <- get_spotify_access_token()
joy <- get_artist_audio_features('joy division')
head(joy)
joy %>%
arrange(-valence) %>%
select(track_name, valence) %>%
head(5) %>%
kable()
get_my_recently_played(limit = 5) %>%
mutate(artist.name = map_chr(track.artists, function(x) x$name[1]),
played_at = as_datetime(played_at)) %>%
select(track.name, artist.name, track.album.name, played_at) %>%
kable()
get_my_top_artists_or_tracks(type = 'artists', time_range = 'long_term', limit = 5) %>%
select(name, genres) %>%
rowwise %>%
mutate(genres = paste(genres, collapse = ', ')) %>%
ungroup %>%
kable()
my_id <- 'grantlovesmusic'
my_plists <- get_user_playlists(my_id)
# my_plists2 <- my_plists %>%
#  filter(playlist_name %in% c('Taiwan Top 50',  'France Top 50', 'Bolivia Top 50', 'U.S. Top 50'))
tracks <- get_playlist_tracks(my_plists)
my_plists
my_id <- 'grantlovesmusic'
my_plists <- get_user_playlists(my_id)
# my_plists2 <- my_plists %>%
#  filter(playlist_name %in% c('Taiwan Top 50',  'France Top 50', 'Bolivia Top 50', 'U.S. Top 50'))
tracks <- get_playlist_tracks(my_plists)
my_id <- 'grantlovesmusic'
my_plists <- get_user_playlists(my_id)
my_plists2 <- my_plists %>%
filter(playlist_name %in% c('Taiwan Top 50',  'France Top 50', 'Bolivia Top 50', 'U.S. Top 50'))
my_id <- 'grantlovesmusic'
my_plists <- get_user_playlists(my_id)
my_plists2 <- my_plists %>%
filter(playlist_name %in% c('Taiwan Top 50',  'France Top 50', 'Bolivia Top 50', 'U.S. Top 50'))
knitr::opts_chunk$set(echo = TRUE)
library(knitr)
# set global chunk options: images will be 7x5 inches
knitr::opts_chunk$set(fig.width=7, fig.height=5)
options(digits = 4)
library(tidyverse)
install.packages("dplyr")
library(dplyr)
algae <- read_table2("algaeBloom.txt", col_names=
c('season','size','speed','mxPH','mn02','C1','NO3','NH4','cPO4','PO4','CHla','a1','a2','a3','a4','a5','a6','a7'), na = "XXXXXXX")
glimpse(algae)
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
knitr::opts_chunk$set(echo = TRUE)
library(knitr)
# set global chunk options: images will be 7x5 inches
knitr::opts_chunk$set(fig.width=7, fig.height=5)
options(digits = 4)
library(tidyverse)
install.packages("dplyr")
library(dplyr)
sum(is.na(algae))
install.packages("dplyr")
#Counting NA values for each variable/column
apply(X = is.na(algae), MARGIN = 2, FUN = sum)
# Counting NA values
apply(X = is.na(mtcars), MARGIN = 1, FUN = sum)
#Counting NA values for each variable/column
apply(X = is.na(algae), MARGIN = 2, FUN = sum)
# Counting how many rows contain missing values
#Counting NA values for each variable/column
apply(X = is.na(algae), MARGIN = 2, FUN = sum)
# Counting how many rows contain missing values
sum(apply(algae, MARGIN = 1, anyNA))
#Counting NA values for each variable/column
apply(X = is.na(algae), MARGIN = 2, FUN = sum)
algae.del <- algae %>% filter(apply(algae, MARGIN = 1, anyNA))
algae.del
algae.del <- algae %>% filter(apply(algae, MARGIN = 1, !anyNA))
algae.del <- algae %>% filter(apply(algae, MARGIN = 1, !is.na(algae)))
knitr::opts_chunk$set(echo = TRUE)
data <- read.csv("https://raw.githubusercontent.com/abauer726/DoubleProjectGroup/main/131%20Project/Spotify%20Dataset/music.csv?token=GHSAT0AAAAAABQVL6TPLGINNLUNUHSBMIYOYPJ7TPA")
head(data)
dim(data)
data <- read.csv("https://raw.githubusercontent.com/abauer726/DoubleProjectGroup/main/131%20Project/Spotify%20Dataset/music.csv?token=GHSAT0AAAAAABQVVO3OPO66XXKMIJFCVAKWYPJ74BQ")
head(data)
dim(data)
knitr::opts_chunk$set(echo = TRUE)
library(knitr)
# set global chunk options: images will be 7x5 inches
knitr::opts_chunk$set(fig.width=7, fig.height=5)
options(digits = 4)
library(tidyverse)
install.packages("dplyr")
library(dplyr)
glimpse(algae)
install.packages("dplyr")
algae %>%
group_by(size) %>%
summarise(n = n())
#Counting NA values for each variable/column
apply(X = is.na(algae), MARGIN = 2, FUN = sum)
# Counting how many rows contain missing values
sum(apply(algae, MARGIN = 1, anyNA))
algae.del <- algae %>% filter(rowSums(is.na(algae))
algae.del <- algae %>% filter(rowSums(is.na(algae)))
algae.del
algae.del <- algae %>% filter(rowSums(!is.na(algae)))
algae.del
algae.del <- algae %>% filter(!is.na(algae))
algae.del
dim(algae)
dim(algae.del)
View(algae.del)
algae.del <- algae %>% filter(!is.na(algae))
algae.del
algae.del <- algae %>% filter(!is.na(algae))
algae.del
algae.del <- algae %>% filter(complete.cases())
algae.del <- algae %>% filter(complete.cases(.))
algae.del
dim(algae.del)
algae.del <- algae %>% filter(complete.cases(.))
algae.del <- algae %>% filter(complete.cases(.))
dim(algae.del)
nrow(algae.del)
# Counting how many rows contain missing values
sum(apply(algae, MARGIN = 1, anyNA))
#Counting NA values for each variable/column
apply(X = is.na(algae), MARGIN = 2, FUN = sum)
algae %>%
geom_histogram(aes(mn02))
algae %>%
ggplot(aes(mn02)) +
geom_histogram(aes(mn02))
algae %>%
ggplot(aes(mn02)) + labs(title= "Histogram of mn02") +
geom_histogram(aes(mn02))
algae %>%
ggplot(aes(mn02)) + ggititle("Histogram of mn02") +
geom_histogram(aes(mn02))
algae %>%
ggplot(aes(mn02)) + ggtitle("Histogram of mn02") +
geom_histogram(aes(mn02))
knitr::opts_chunk$set(echo = TRUE)
library(knitr)
# set global chunk options: images will be 7x5 inches
knitr::opts_chunk$set(fig.width=7, fig.height=5)
options(digits = 4)
library(tidyverse)
# install.packages("dplyr")
library(dplyr)
cbind(
lapply(algae[4:11], FUN = var, na.rm = T)
)
algae %>%
ggplot(aes(mn02, y = after_stat(density))) + ggtitle("Histogram of mn02") +
geom_histogram(aes(mn02))
algae1 <- algae %>%
ggplot(aes(mn02, y = after_stat(density))) + ggtitle("Histogram of mn02") +
geom_histogram(aes(mn02))
algae1
algae %>%
ggplot(aes(a3)) + ggtitle("A conditioned Boxplot of Algal a3") + geom_boxplot(aes(a3))
knitr::opts_chunk$set(echo = TRUE)
library(knitr)
# set global chunk options: images will be 7x5 inches
knitr::opts_chunk$set(fig.width=7, fig.height=5)
options(digits = 4)
library(tidyverse)
# install.packages("dplyr")
library(dplyr)
algae.del <- filter(algae, complete.cases(.))
algae.del <- algae %>% filter(complete.cases(.))
nrow(algae.del)
# Counting how many rows contain missing values
sum(apply(algae, MARGIN = 1, anyNA))
#Counting NA values for each variable/column
apply(is.na(algae), MARGIN = 2, sum)
algae.del <- filter(.data = algae, complete.cases(.))
algae.del <- filter(algae, complete.cases(.))
knitr::opts_chunk$set(echo = TRUE)
library(knitr)
# set global chunk options: images will be 7x5 inches
knitr::opts_chunk$set(fig.width=7, fig.height=5)
options(digits = 4)
library(tidyverse)
# install.packages("dplyr")
library(dplyr)
algae <- read_table2("algaeBloom.txt", col_names=
c('season','size','speed','mxPH','mn02','C1','NO3','NH4','cPO4','PO4','CHla','a1','a2','a3','a4','a5','a6','a7'), na = "XXXXXXX")
glimpse(algae)
dim(algae)
algae %>%
group_by(size) %>%
summarise(n = n())
summary(algae)
mean_col <- cbind(
lapply(algae[4:11], FUN = mean, na.rm = T)
)
var_col <- cbind(
lapply(algae[4:11], FUN = var, na.rm = T)
)
knitr::kable(list(mean_col))
knitr::kable(list(var_col))
median_col <- cbind(
lapply(algae[4:11], FUN = median, na.rm = T)
)
mad_col <- cbind(
lapply(algae[4:11], FUN = mad, na.rm = T)
)
knitr::kable(list(median_col))
knitr::kable(list(mad_col))
algae1 <- algae %>%
ggplot(aes(mn02, y = after_stat(density))) + ggtitle("Histogram of mn02") +
geom_histogram(aes(mn02))
algae1
algae1 + geom_density()
algae_new <- algae                             # Duplicate data
algae_new$group <- factor(algae_new$speed,     # Reorder factor levels
c("high", "medium", "low"))
algae3 <- ggplot(algae_new, aes(y=a3, fill= speed, group)) +
ggtitle("A conditioned Boxplot of Algal a3") +
geom_boxplot()
algae3
# Counting how many rows contain missing values
sum(apply(algae, MARGIN = 1, anyNA))
#Counting NA values for each variable/column
apply(is.na(algae), MARGIN = 2, sum)
algae.del <- filter(algae, complete.cases(.))
algae.del <- algae %>% filter(complete.cases(.))
nrow(algae.del)
library(spotifyr)
library(tidyverse)
library(knitr)
library(lubridate)
library(httpuv)
# randomly subset syntax, with 100 points (couldnt run this due to the file not loading)
music[sample(nrow(music), 100), ]
library(spotifyr)
library(tidyverse)
library(knitr)
library(lubridate)
library(httpuv)
music <- read.csv("/Users/Grant/DoubleProjectGroup/131 Project/Spotify Dataset/musicdata.csv")
View(music)
# New research question: can we predict if a song will be a hit based on its attributes? Response variable: song.hotttnesss
energy <- ggplot(music,aes(x=energy,y=popularity))+geom_point()
energy
liveness <- ggplot(music,aes(x=liveness, y=popularity))+geom_point()
liveness
valence <- ggplot(music, aes(x=valence, y=popularity))+geom_point(alpha=0.2) + facet_grid(vars(danceability))
valence
# randomly subset syntax, with 100 points (couldnt run this due to the file not loading)
sample <- music[sample(nrow(music), 100), ]
energy <- ggplot(sample,aes(x=energy,y=popularity))+geom_point()
energy
liveness <- ggplot(sample,aes(x=liveness, y=popularity))+geom_point()
liveness
valence <- ggplot(sample, aes(x=valence, y=popularity))+geom_point(alpha=0.2) + facet_grid(vars(danceability))
valence
